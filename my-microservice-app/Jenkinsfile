pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_PSW = credentials('DOCKERHUB_CREDENTIALS_PSW')
        DOCKERHUB_CREDENTIALS_USR = credentials('DOCKERHUB_CREDENTIALS_USR')
        DOCKER_HUB_REPO = 'mawulidev'  // Replace with your DockerHub username
        REPO_URL = 'https://github.com/winfred-agbotey/java-advance-week4.git'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[url: REPO_URL]],
                        extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', noTags: false, shallow: true, depth: 1]]
                    ])
                }
            }
        }

        stage('Build & Test Modules') {
            parallel {
                stage('Build & Test - API') {
                    steps {
                        sh '''
                            cd my-microservice-app/api
                            mvn clean install
                        '''
                    }
                }
                stage('Build & Test - Service') {
                    steps {
                        sh '''
                            cd my-microservice-app/service
                            mvn clean install
                        '''
                    }
                }
                stage('Build & Test - Core') {
                    steps {
                        sh '''
                            cd my-microservice-app/core
                            mvn clean install
                        '''
                    }
                }
                stage('Build & Test - Data Access') {
                    steps {
                        sh '''
                            cd my-microservice-app/data-access
                            mvn clean install
                        '''
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build API Docker Image') {
                    steps {
                        sh '''
                            cd my-microservice-app/api
                            docker build -t $DOCKER_HUB_REPO/api:latest .
                        '''
                    }
                }
                stage('Build Service Docker Image') {
                    steps {
                        sh '''
                            cd my-microservice-app/service
                            docker build -t $DOCKER_HUB_REPO/service:latest .
                        '''
                    }
                }
                stage('Build Core Docker Image') {
                    steps {
                        sh '''
                            cd my-microservice-app/core
                            docker build -t $DOCKER_HUB_REPO/core:latest .
                        '''
                    }
                }
                stage('Build Data Access Docker Image') {
                    steps {
                        sh '''
                            cd my-microservice-app/data-access
                            docker build -t $DOCKER_HUB_REPO/data-access:latest .
                        '''
                    }
                }
            }
        }

        stage('Push Docker Images to DockerHub') {
            input {
                message 'Deploy to Production?'
                ok 'Deploy'
                parameters {
                    string(name: 'TARGET_ENV', defaultValue: 'PROD', description: 'Target deployment environment')
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'DOCKERHUB_CREDENTIALS_USR', variable: 'DOCKERHUB_CREDENTIALS_USR'),
                        string(credentialsId: 'DOCKERHUB_CREDENTIALS_PSW', variable: 'DOCKERHUB_CREDENTIALS_PSW')
                    ]) {
                        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'

                        parallel {
                            stage('Push API Image') {
                                steps {
                                    sh 'docker push $DOCKER_HUB_REPO/api:latest'
                                }
                            }
                            stage('Push Service Image') {
                                steps {
                                    sh 'docker push $DOCKER_HUB_REPO/service:latest'
                                }
                            }
                            stage('Push Core Image') {
                                steps {
                                    sh 'docker push $DOCKER_HUB_REPO/core:latest'
                                }
                            }
                            stage('Push Data Access Image') {
                                steps {
                                    sh 'docker push $DOCKER_HUB_REPO/data-access:latest'
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and Deployment Successful!'
        }
        failure {
            echo 'Build Failed! Check the logs.'
        }
    }
}
